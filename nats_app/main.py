"""–ü—Ä–æ—Å—Ç–æ–µ NATS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram."""

import asyncio
import logging

from aiogram import Bot
from nats.aio.client import Client as NATS
from nats.js import JetStreamContext

from apps.core.config import Settings
from apps.nats_app.consumer import SimpleConsumer
from apps.nats_app.producer import SimpleProducer


async def create_streams(js_context: JetStreamContext, logger: logging.Logger) -> None:
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å—Ç—Ä–∏–º–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    streams_config = {
        "TELEGRAM_MESSAGES": {
            "subjects": ["telegram.messages"],
            "description": "–û—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∏–º –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π Telegram",
        },
        "TELEGRAM_RESULTS": {
            "subjects": ["telegram.results"],
            "description": "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π",
        },
        "TELEGRAM_BROADCASTS": {
            "subjects": ["telegram.broadcasts"],
            "description": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—Å—ã–ª–∫–∞—Ö",
        },
        "TELEGRAM_ERRORS": {
            "subjects": ["telegram.errors"],
            "description": "–û—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π",
        },
    }

    for stream_name, config in streams_config.items():
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ stream
            try:
                stream_info = await js_context.stream_info(stream_name)
                logger.info(
                    f"‚ÑπÔ∏è Stream {stream_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (—Å–æ–æ–±—â–µ–Ω–∏–π: {stream_info.state.messages})"
                )
            except Exception:
                # Stream –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
                await js_context.add_stream(
                    name=stream_name,
                    subjects=config["subjects"],
                    description=config["description"],
                )
                logger.info(f"‚úÖ Stream {stream_name} —Å–æ–∑–¥–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è stream {stream_name}: {e}")


async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    )
    logger = logging.getLogger(__name__)

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = Settings()

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ NATS
        nats_client = NATS()
        await nats_client.connect(settings.nats.url)
        js_context = nats_client.jetstream()

        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç—Ä–∏–º—ã
        await create_streams(js_context, logger)

        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
        await asyncio.sleep(1)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
        bot = Bot(token=settings.tg_bot.token)

        # –°–æ–∑–¥–∞–µ–º consumer
        consumer = SimpleConsumer(nats_client, js_context, bot, logger)

        # –°–æ–∑–¥–∞–µ–º producer (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        producer = SimpleProducer(nats_client, js_context, logger)

        logger.info("üöÄ NATS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")

        # –ó–∞–ø—É—Å–∫–∞–µ–º consumer
        await consumer.start()

    except (KeyboardInterrupt, asyncio.CancelledError):
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise
    finally:
        if "consumer" in locals():
            await consumer.stop()
        if "nats_client" in locals():
            await nats_client.close()
        if "bot" in locals():
            await bot.session.close()
        logger.info("‚úÖ NATS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")


if __name__ == "__main__":
    asyncio.run(main())
