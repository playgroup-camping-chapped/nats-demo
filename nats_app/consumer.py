"""–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å NATS –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""

import asyncio
import json
import logging

from aiogram import Bot
from aiogram.exceptions import (
    TelegramForbiddenError,
    TelegramNotFound,
    TelegramRetryAfter,
)
from aiogram.types import InlineKeyboardMarkup
from nats.aio.client import Client as NATS
from nats.js import JetStreamContext

from apps.common.database.models.user import UserORM
from apps.common.database.session import async_session_maker
from apps.common.schemas import AttachmentType
from apps.core.config import Settings
from apps.nats_app.models import MessageResult, SimpleMessage


class SimpleConsumer:
    """–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ NATS."""

    def __init__(
        self,
        nats_client: NATS,
        js_context: JetStreamContext,
        bot: Bot,
        logger: logging.Logger,
    ):
        self.nats_client = nats_client
        self.js_context = js_context
        self.bot = bot
        self.logger = logger
        self._running = False
        self._consumer = None

        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫
        self.broadcast_stats: dict[str, dict[str, int]] = {}
        self.completed_broadcasts: set[str] = (
            set()
        )  # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

        # –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
        self._cleanup_task = None

    async def start(self) -> None:
        """–ó–∞–ø—É—Å–∫ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è."""
        try:
            # –°–æ–∑–¥–∞–µ–º consumer
            self._consumer = await self.js_context.pull_subscribe(
                subject="telegram.messages",
                durable="telegram_sender",
            )

            self._running = True
            self.logger.info("üöÄ –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å NATS –∑–∞–ø—É—â–µ–Ω")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏
            self._cleanup_task = asyncio.create_task(self._memory_cleanup_loop())

            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            await self._process_messages()

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è: {e}")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É
            await asyncio.sleep(2)
            try:
                self._consumer = await self.js_context.pull_subscribe(
                    subject="telegram.messages",
                    durable="telegram_sender",
                )
                self._running = True
                self.logger.info("üöÄ –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å NATS –∑–∞–ø—É—â–µ–Ω (–ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞)")
                self._cleanup_task = asyncio.create_task(self._memory_cleanup_loop())
                await self._process_messages()
            except Exception as retry_error:
                self.logger.error(
                    f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏: {retry_error}"
                )
                raise

    async def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è."""
        self._running = False

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏
        if self._cleanup_task:
            self._cleanup_task.cancel()
            try:
                await self._cleanup_task
            except asyncio.CancelledError:
                pass

        # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç consumer
        if self._consumer:
            try:
                await self._consumer.unsubscribe()
            except Exception as e:
                self.logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ –æ—Ç consumer: {e}")

        self.logger.info("üõë –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å NATS –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def _memory_cleanup_loop(self) -> None:
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –æ—Ç —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        while self._running:
            try:
                await asyncio.sleep(600)
                await self._cleanup_old_broadcasts()
                self.logger.info("üßπ –û—á–∏—â–µ–Ω–∞ –ø–∞–º—è—Ç—å –æ—Ç —Å—Ç–∞—Ä—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫")
            except asyncio.CancelledError:
                break
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏: {e}")

    async def _cleanup_old_broadcasts(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Å—ã–ª–∫–∞—Ö."""
        try:
            # –û—á–∏—â–∞–µ–º completed_broadcasts –µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ 1000
            if len(self.completed_broadcasts) > 1000:
                self.completed_broadcasts.clear()
                self.logger.info("üßπ –û—á–∏—â–µ–Ω–∞ –ø–∞–º—è—Ç—å –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫")

            # –û—á–∏—â–∞–µ–º broadcast_stats –µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ 100
            if len(self.broadcast_stats) > 100:
                # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ (–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ)
                active_broadcasts = {}
                for broadcast_id, stats in self.broadcast_stats.items():
                    if (
                        stats["total_expected"]
                        and stats["total_processed"] < stats["total_expected"]
                    ):
                        active_broadcasts[broadcast_id] = stats

                self.broadcast_stats = active_broadcasts
                self.logger.info(
                    f"üßπ –û—á–∏—â–µ–Ω–∞ –ø–∞–º—è—Ç—å –æ—Ç —Å—Ç–∞—Ä—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫. –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–Ω—ã—Ö: {len(self.broadcast_stats)}"
                )

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫: {e}")

    async def _process_messages(self) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏."""
        self.logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏...")

        while self._running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –±–∞—Ç—á —Å–æ–æ–±—â–µ–Ω–∏–π
                messages = await self._consumer.fetch(batch=25, timeout=5.0)

                if not messages:
                    continue

                self.logger.info(f"üì¶ –ü–æ–ª—É—á–µ–Ω –±–∞—Ç—á –∏–∑ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")

                tasks = []
                for msg in messages:
                    task = asyncio.create_task(self._process_message(msg))
                    tasks.append(task)

                await asyncio.gather(*tasks, return_exceptions=True)

            except TimeoutError:
                continue
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞: {e}")

    async def _process_message(self, msg) -> MessageResult:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        try:
            # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            data = json.loads(msg.data.decode())
            message = SimpleMessage(**data)

            self.logger.info(
                f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.user_id}: {message.text[:50]}..."
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            result = await self._send_to_telegram(message)

            # –ü—É–±–ª–∏–∫—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å—Ç—Ä–∏–º –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            await self._publish_result(message, result)

            await msg.ack()
            self.logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ (ack)")

            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏
            if message.broadcast_id:
                await self._track_broadcast_progress(
                    message.broadcast_id,
                    message.user_id,
                    result,
                    message.total_expected,
                )

            return result

        except TelegramRetryAfter as e:
            self.logger.warning(f"‚è≥ Rate limit, —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–∑–∂–µ: {e}")
            return MessageResult(
                success=False,
                error_type="RATE_LIMIT",
                error_message=f"—á–µ—Ä–µ–∑ {e.retry_after} —Å–µ–∫",
            )

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await msg.ack()  # –í—Å–µ —Ä–∞–≤–Ω–æ –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
            error_result = MessageResult(
                success=False, error_type="PROCESSING_ERROR", error_message=str(e)
            )
            await self._publish_error(message, error_result)
            return error_result

    async def _send_to_telegram(self, message: SimpleMessage) -> MessageResult:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram."""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = None
            if message.buttons:
                keyboard = InlineKeyboardMarkup(inline_keyboard=message.buttons)

            # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç –±–æ–ª—å—à–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
            if message.attachments and len(message.text) > 1000:
                await self._send_attachment(
                    message.user_id, message.attachments, message.attachment_type
                )

                telegram_msg = await self.bot.send_message(
                    chat_id=message.user_id,
                    text=message.text,
                    parse_mode=message.parse_mode,
                    reply_markup=keyboard,
                )
            elif message.attachments:
                telegram_msg = await self._send_attachment_with_text(
                    message.user_id,
                    message.attachments,
                    message.attachment_type,
                    message.text,
                    message.parse_mode,
                    keyboard,
                )
            else:
                telegram_msg = await self.bot.send_message(
                    chat_id=message.user_id,
                    text=message.text,
                    parse_mode=message.parse_mode,
                    reply_markup=keyboard,
                )

            self.logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.user_id}")
            return MessageResult(success=True, message_id=str(telegram_msg.message_id))

        except TelegramRetryAfter as e:
            # –û—à–∏–±–∫–∞ 429 - –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
            self.logger.warning(
                f"‚è≥ Rate limit –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.user_id}: –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {e.retry_after} —Å–µ–∫"
            )
            # –ù–ï –æ—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
            raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ

        except TelegramNotFound:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω - –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø–∏—Å–∞–Ω–Ω–æ–≥–æ
            self.logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await self._mark_user_unsubscribed(message.user_id)
            return MessageResult(
                success=False, error_type="USER_NOT_FOUND", user_subscribed_to_bot=False
            )

        except TelegramForbiddenError:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ - –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø–∏—Å–∞–Ω–Ω–æ–≥–æ
            self.logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
            await self._mark_user_unsubscribed(message.user_id)
            return MessageResult(
                success=False, error_type="USER_FORBIDDEN", user_subscribed_to_bot=False
            )

    async def _publish_result(
        self, message: SimpleMessage, result: MessageResult
    ) -> None:
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        try:
            result_dict = result.model_dump()
            if result_dict.get("processed_at"):
                result_dict["processed_at"] = result_dict["processed_at"].isoformat()

            result_data = {
                "message_id": message.user_id,
                "text_preview": message.text[:100],
                "message_type": message.message_type,
                "broadcast_id": message.broadcast_id,
                "result": result_dict,
                "timestamp": result.processed_at.isoformat(),
            }

            await self.js_context.publish(
                subject="telegram.results",
                payload=json.dumps(result_data, ensure_ascii=False).encode(),
            )
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")

    async def _publish_error(
        self, message: SimpleMessage, result: MessageResult
    ) -> None:
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—à–∏–±–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å—Ç—Ä–∏–º."""
        try:
            error_dict = result.model_dump()
            if error_dict.get("processed_at"):
                error_dict["processed_at"] = error_dict["processed_at"].isoformat()

            error_data = {
                "message_id": message.user_id,
                "text_preview": message.text[:100],
                "message_type": message.message_type,
                "broadcast_id": message.broadcast_id,
                "error": error_dict,
                "timestamp": result.processed_at.isoformat(),
            }

            await self.js_context.publish(
                subject="telegram.errors",
                payload=json.dumps(error_data, ensure_ascii=False).encode(),
            )
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—à–∏–±–∫–∏: {e}")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.user_id}: {e}")
            return MessageResult(
                success=False, error_type="UNEXPECTED_ERROR", error_message=str(e)
            )

    async def _send_attachment_with_text(
        self,
        user_id: int,
        attachment: str,
        attachment_type: AttachmentType,
        text: str,
        parse_mode: str,
        keyboard=None,
    ):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–ª–æ–∂–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."""
        try:
            if attachment_type == AttachmentType.PHOTO:
                return await self.bot.send_photo(
                    chat_id=user_id,
                    photo=attachment,
                    caption=text,
                    parse_mode=parse_mode,
                    reply_markup=keyboard,
                )
            if attachment_type == AttachmentType.VIDEO:
                return await self.bot.send_video(
                    chat_id=user_id,
                    video=attachment,
                    caption=text,
                    parse_mode=parse_mode,
                    reply_markup=keyboard,
                )
            if attachment_type == AttachmentType.DOCUMENT:
                return await self.bot.send_document(
                    chat_id=user_id,
                    document=attachment,
                    caption=text,
                    parse_mode=parse_mode,
                    reply_markup=keyboard,
                )
            if attachment_type == AttachmentType.VOICE:
                await self.bot.send_voice(chat_id=user_id, voice=attachment)
                return await self.bot.send_message(
                    chat_id=user_id,
                    text=text,
                    parse_mode=parse_mode,
                    reply_markup=keyboard,
                )
            if attachment_type == AttachmentType.VIDEO_NOTE:
                await self.bot.send_video_note(chat_id=user_id, video_note=attachment)
                return await self.bot.send_message(
                    chat_id=user_id,
                    text=text,
                    parse_mode=parse_mode,
                    reply_markup=keyboard,
                )
            return await self.bot.send_document(
                chat_id=user_id,
                document=attachment,
                caption=text,
                parse_mode=parse_mode,
                reply_markup=keyboard,
            )

        except Exception:
            raise

    async def _send_attachment(
        self, user_id: int, attachment: str, attachment_type: AttachmentType
    ) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–ª–æ–∂–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞."""
        try:
            if attachment_type == AttachmentType.PHOTO:
                await self.bot.send_photo(chat_id=user_id, photo=attachment)
            elif attachment_type == AttachmentType.VIDEO:
                await self.bot.send_video(chat_id=user_id, video=attachment)
            elif attachment_type == AttachmentType.DOCUMENT:
                await self.bot.send_document(chat_id=user_id, document=attachment)
            elif attachment_type == AttachmentType.VOICE:
                await self.bot.send_voice(chat_id=user_id, voice=attachment)
            elif attachment_type == AttachmentType.VIDEO_NOTE:
                await self.bot.send_video_note(chat_id=user_id, video_note=attachment)
            else:
                await self.bot.send_document(chat_id=user_id, document=attachment)

        except Exception:
            # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –∑–¥–µ—Å—å - –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ _send_to_telegram
            raise

    async def _mark_user_unsubscribed(self, user_id: int) -> None:
        """–û—Ç–º–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –æ—Ç–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –æ—Ç –±–æ—Ç–∞."""
        try:
            async with async_session_maker() as session:
                user = await session.get(UserORM, user_id)
                if user:
                    user.subscribed_to_bot = False
                    await session.commit()
                    self.logger.info(
                        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ—Ç–ø–∏—Å–∞–Ω–Ω—ã–π"
                    )

        except Exception as e:
            self.logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}"
            )

    async def _track_broadcast_progress(
        self,
        broadcast_id: str,
        user_id: int,
        result: MessageResult,
        total_expected: int,
    ) -> None:
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞—Å—Å—ã–ª–∫–∏."""
        if broadcast_id not in self.broadcast_stats:
            self.broadcast_stats[broadcast_id] = {
                "total_processed": 0,
                "successful": 0,
                "unsubscribed": 0,
                "errors": 0,
                "total_expected": total_expected,
            }

        stats = self.broadcast_stats[broadcast_id]
        stats["total_processed"] += 1

        if result.success:
            stats["successful"] += 1
        elif result.user_subscribed_to_bot is False:
            stats["unsubscribed"] += 1
        else:
            stats["errors"] += 1

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        await self._check_broadcast_completion(broadcast_id)

    async def _check_broadcast_completion(self, broadcast_id: str) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
        try:
            stats = self.broadcast_stats[broadcast_id]
            self.logger.info(
                f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏ {broadcast_id}: "
                f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['total_processed']}, "
                f"–£—Å–ø–µ—à–Ω–æ: {stats['successful']}, "
                f"–û—Ç–ø–∏—Å–∞–Ω—ã: {stats['unsubscribed']}, "
                f"–û—à–∏–±–∫–∏: {stats['errors']}",
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            if (
                stats["total_expected"]
                and stats["total_processed"] >= stats["total_expected"]
                and broadcast_id not in self.completed_broadcasts
            ):
                self.logger.info(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ {broadcast_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                self.completed_broadcasts.add(broadcast_id)  # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
                await self._notify_broadcast_completion(broadcast_id)
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                del self.broadcast_stats[broadcast_id]

        except Exception as e:
            self.logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ {broadcast_id}: {e}"
            )

    async def _notify_broadcast_completion(self, broadcast_id: str) -> None:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏."""
        try:
            settings = Settings()

            stats = self.broadcast_stats[broadcast_id]
            message = (
                f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ {broadcast_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['total_processed']}\n"
                f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['successful']}\n"
                f"‚Ä¢ –û—Ç–ø–∏—Å–∞–Ω—ã: {stats['unsubscribed']}\n"
                f"‚Ä¢ –û—à–∏–±–∫–∏: {stats['errors']}"
            )

            for admin_id in settings.tg_bot.admin_ids:
                await self.bot.send_message(chat_id=admin_id, text=message)

            self.logger.info(
                f"‚úÖ –ê–¥–º–∏–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ {broadcast_id}"
            )

        except Exception as e:
            self.logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ –æ —Ä–∞—Å—Å—ã–ª–∫–µ {broadcast_id}: {e}"
            )
